const cds = require('../cds')

function sqliteConvertDraftAdminPathExpression(req) {
  if (
    !req.query?.SELECT ||
    !req.query?._target?.name?.endsWith('.drafts') ||
    req.query?.SELECT?.from?.args?.some(a => a.ref?.[0] === 'DRAFT_DraftAdministrativeData')
  )
    return
  let hasDraftAdminPathExpression = false

  const alias = req.query.SELECT.from.as

  const _modifyCols = cols => {
    return cols.map(col => {
      if (col.ref?.length > 1 && col.ref[0] === 'DraftAdministrativeData') {
        hasDraftAdminPathExpression = true
        const newCol = { ...col }
        newCol.ref = [...col.ref]
        newCol.ref[0] = 'filterAdmin'
        return newCol
      } else if (col.ref?.length > 1 && alias && col.ref[0] === alias && col.ref[1] === 'DraftAdministrativeData') {
        hasDraftAdminPathExpression = true
        const newCol = { ...col }
        newCol.ref = [...col.ref]
        newCol.ref.shift()
        newCol.ref[0] = 'filterAdmin'
        return newCol
      }
      if (col.expand) {
        const newCol = { ...col }
        newCol.expand = _modifyCols(col.expand)
        return newCol
      }
      return col
    })
  }

  const clone = cds.ql.clone(req.query)

  if (clone.SELECT.columns) clone.SELECT.columns = _modifyCols(req.query.SELECT.columns)
  if (clone.SELECT.where) clone.SELECT.where = _modifyCols(req.query.SELECT.where)

  if (hasDraftAdminPathExpression) {
    clone
      .join('DRAFT_DraftAdministrativeData', 'filterAdmin')
      .on([
        { ref: alias ? [alias, 'DraftAdministrativeData_DraftUUID'] : ['DraftAdministrativeData_DraftUUID'] },
        '=',
        { ref: ['filterAdmin', 'DraftUUID'] }
      ])
    req.query = clone
  }
}
sqliteConvertDraftAdminPathExpression._initial = true
module.exports = sqliteConvertDraftAdminPathExpression
