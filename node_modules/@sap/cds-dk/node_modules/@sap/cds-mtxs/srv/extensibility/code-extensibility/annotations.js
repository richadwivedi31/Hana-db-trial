const fs = require('fs')
const path = require('path')
const cds = require('@sap/cds/lib')
const { staticCheckCode, generateCode } = require('./codeValidation')

const CODE_ANNOTATION = '@extension.code'

async function _getTenantModel(tenant) {
  const { 'cds.xt.ModelProviderService': mps } = cds.services
  return await mps.getCsn(tenant, [], 'nodejs')
}

const _readHandlers = async projectPath => {  
  const dir = path.join(projectPath, 'srv', 'handlers')
  try { return await fs.promises.readdir(dir) }
  catch(e) { if (e.code !== 'ENOENT') throw e }
  return []
}

const _parseName = file => {
  const parts = file.slice(0, -3).split('-')
  if (parts.length !== 3) cds.error(`Bad handler name ${path.basename(file, '.js')}`, { code: 400 })
  return { entityName: parts[0], registration: parts[1], operation: parts[2] }
}

const _getFQN = (entityName, def, operation) => {
  const entity = def[entityName]
  const bound = entity?.actions && entity.actions[`${operation}`]
  return { fqn:  bound || (entity && def[`${entity.name}.${operation}`]) || entity, bound : !!bound }
}

const _addAnnotationLocal = (file, code) => {
  const { operation, registration, entityName } = _parseName(file)
  // first check if action/function
  const {fqn} = _getFQN(entityName, cds.model.definitions, operation)
  if (!fqn) cds.error(`Bad handler name ${entityName}-${registration}-${operation}}`, { code: 400 })
  if (!fqn[CODE_ANNOTATION]) {
    fqn[CODE_ANNOTATION] = []
  }
  fqn[CODE_ANNOTATION].push({ [registration]: operation, code })
}

const _addAnnotationProd = async (csn, file, code, tenant) => {
  const { operation, registration, entityName } = _parseName(file)
  const m = await _getTenantModel(tenant)
  const {fqn, bound} = _getFQN(entityName, m.definitions, operation)  
  if (!fqn) cds.error(`Bad handler name ${entityName}-${registration}-${operation}`, { code: 400 })
 
  if (!csn.extensions) csn.extensions = []
  const fqName = bound ? entityName : fqn.name
  const ext = csn.extensions.find(element => element.annotate === fqName)
  if (bound) {
    if (ext && ext.actions && ext.actions[operation] && ext.actions[operation][CODE_ANNOTATION]) {
      ext.actions[operation][CODE_ANNOTATION].push({ [registration]: operation, code })
    } else {
      csn.extensions.push({ 
        annotate: fqName, 
        actions: { [operation] : { [CODE_ANNOTATION]: [{ [registration]: operation, code }] } } })
    }
  } else {
    if (ext && ext[CODE_ANNOTATION]) {
      ext[CODE_ANNOTATION].push({ [registration]: operation, code })
    } else {
      csn.extensions.push({ annotate: fqName, [CODE_ANNOTATION]: [{ [registration]: operation, code }] })
    }
  }
}

const addCodeAnnotations = async (localExec, projectPath = cds.root, csn, tenant) => {
  const handlers = await _readHandlers(projectPath)
  for (const file of handlers) {
    if (file.startsWith('.')) continue
    const fpath = path.join(projectPath, 'srv', 'handlers', file)
    let code = await fs.promises.readFile(fpath, 'utf8')
    // parse and generate code in order to remove unnecessary parts like comments
    code = generateCode(code)
    const findings = staticCheckCode(code)    
    if (findings.length > 0) return findings

    localExec ? _addAnnotationLocal(file, code) : await _addAnnotationProd(csn, file, code, tenant)
  }
}

module.exports = { addCodeAnnotations }
