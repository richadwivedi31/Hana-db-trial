const { URL } = require('url')
const util = require('util');
const cds = require('@sap/cds/lib')
const LOG = cds.log()

module.exports = {
  async token(request, response) {
    if (request.method === 'HEAD') {
      response.status(204).send()
      return
    }

    const { passcode, refresh_token, subdomain, clientid, clientsecret } = request.query
    const { credentials } = cds.env.requires.auth
    if (!credentials) {
      cds.error(
        'No auth credentials defined. The application is likely not bound to an authentication service instance.'
      )
    }

    const parsedUrl = new URL(credentials.url)
    parsedUrl.hostname = subdomain + '.' + parsedUrl.hostname.split('.').slice(1).join('.')

    LOG.info(`Get auth token using URL ${parsedUrl}`)

    if (clientid) {
      LOG.info(`Using clientid/clientsecret from API call with clientid ${clientid}`)
    }

    const username = clientid ? clientid : credentials.clientid
    const password = clientid ? clientsecret : credentials.clientsecret
    const { xsappname } = cds.env.requires.auth?.credentials ?? cds.env.requires.uaa?.credentials ?? {}
    const path =
      'oauth/token?' +
      (refresh_token
        ? `grant_type=refresh_token&refresh_token=${refresh_token}`
        : clientid
        ? `grant_type=client_credentials&response_type=token`
        : `grant_type=password&passcode=${encodeURIComponent(passcode)}`) +
      `&scope=${encodeURIComponent(xsappname + '.cds.ExtensionDeveloper')}`

    try {
      // eslint-disable-next-line cds/no-missing-dependencies
      const { data } = await require('axios').post(
        parsedUrl + path,
        { 'Content-Type': 'application/json' },
        { auth: { username, password } }
      )
      response.send(data)
    } catch (error) {
      const data = error.response?.data
      const reason = data?.error /* RFC 6749 */ ?? error.message
      const details = data ? (` Details: '${data.error_description /* RFC 6749 */ || util.inspect(data)}'.`) : ''
      const message = `Authentication failed: ${reason}.${details} Passcode URL: https://${parsedUrl.hostname}/passcode`
      const status = error.response?.status ?? 500
      Object.assign(error, { message })
      LOG.error(error)
      response.status(status).send(error)
    }
  }
}
