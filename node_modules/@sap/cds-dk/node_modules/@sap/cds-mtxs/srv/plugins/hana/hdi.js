const HdiDeployUtil = require('@sap/cds/bin/deploy/to-hana/hdiDeployUtil')
const { clean_env } = require('@sap/hdi-deploy/library')
const cds = require ('@sap/cds/lib')

exports.deploy = async (hana, tenant, cwd, options) => {
  const LOG = cds.log('mtx')
  const env = _hdi_env4(tenant,hana,options)
  LOG.debug(`Using HDI options: ${env.HDI_DEPLOY_OPTIONS}`)
  try {
    LOG.info('------------[BEGIN HDI-DEPLOY-OUTPUT]---------------')
    await HdiDeployUtil.deployTenant (cwd, env, LOG)
  } finally {
    LOG.info('-------------[END HDI-DEPLOY-OUTPUT]----------------')
  }
}

const _hdi_env4 = (t,container,options)=>{
  const env = { ...clean_env(process.env), TARGET_CONTAINER:t }
  env.SERVICE_REPLACEMENTS = process.env.SERVICE_REPLACEMENTS

  const { hana=[], 'user-provided':up } = _parse_env ('VCAP_SERVICES')
  env.VCAP_SERVICES = JSON.stringify ({
    hana:[ { ...container, name:t, tenant_id:t }, ...hana ],
    'user-provided':up
  })

  const hdi_opts = _parse_env ('HDI_DEPLOY_OPTIONS', options)
  const invalid = Object.keys(hdi_opts).filter (o => !(o in {
    // subset of https://help.sap.com/viewer/4505d0bdaf4948449b7f7379d24d0f0d/2.0.05/en-US/a4bbc2dd8a20442387dc7b706e8d3070.html
    lock_container_timeout:1,
    connection_timeout:1,
    write_timeout:1,
    exclude_filter:1,
    include_filter:1,
    path_parameter:1,
    working_set:1,
    auto_undeploy:1,
    undeploy:1,
    optimise_file_upload:1,
    verbose:1,
    trace:1,
    parameter:1
  }))
  if (invalid.length) {
    cds.error(`HDI deployment options '${invalid}' cannot be used with MTX deployment`, { status: options ? 400 : 500 })
  }
  env.HDI_DEPLOY_OPTIONS = JSON.stringify (hdi_opts)
  return env
}
const _parse_env = (key, options) => {
  const val = process.env[key]; if (!val) return {}
  try {
    return { ...JSON.parse (val), ...options }
  } catch(e) {
    e.message = `Invalid ${key} options: ${e.message} ${val}`
    e.code = e.statusCode = 400
    throw e
  }
}
