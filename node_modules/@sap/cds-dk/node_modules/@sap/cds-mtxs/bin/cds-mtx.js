#!/usr/bin/env node
/* eslint-disable no-console */

const cds = require('@sap/cds')
const { _import, isfile, local, path } = cds.utils

const SUPPORTED = ['subscribe', 'unsubscribe', 'upgrade']

async function cds_mtx(cmd, tenant) {
    if (!cmd) _usage()
    if (!SUPPORTED.includes(cmd)) _usage(`Unknown command ${cmd}.`)
    if (!_hasMtEnv()) _handleError(`cds ${cmd} operation can only be run inside a multitenant application environment using @sap/cds-mtxs.`)
    if (!tenant) _handleError(`Please provide a tenant: cds ${cmd} <tenant>`)
    const { 'cds.xt.DeploymentService':ds } = await cds.serve ([
        '@sap/cds-mtxs/srv/deployment-service',
        '@sap/cds-mtxs/srv/model-provider'
    ])
    await _local_server_js()
    await cds.emit('served')
    if (cmd === 'unsubscribe') { await cds.connect() }
    try {
        await ds[cmd](tenant)
    } finally {
        await cds.db.disconnect(cds.requires.multitenancy.t0 ?? 't0')
    }
}

// copied from cds.serve
async function _local_server_js() {
    const _local = file => isfile(file) || isfile (path.join(cds.env.folders.srv,file))
    let cli_js = process.env.CDS_TYPESCRIPT && _local('cli.ts') || _local('cli.js')
    if (cli_js) {
      console.log ('[cds] - loading server from', { file: local(cli_js) })
      let fn = await _import(cli_js)
    }
  }

// check for application environment
// fails for edge cases (ignored for now):
// @sap/cds-mtx application with missing modules (no npm install)
// dev scenario with both @sap/cds-mtx and @sap/cds-mtxs installed
function _hasMtEnv() {
    return cds.requires.multitenancy && !cds.mtx
}

function _handleError(message) {
    console.log(message)
    process.exit(1)
}

function _usage(message) {
    if (message) console.log(message)
    console.error(
        `
        USAGE

           cds-mtx <command> <tenant>

        COMMANDS

           subscribe   subscribe a tenant
           unsubscribe unsubscribe a tenant
        `
    )
    process.exit(1)
}

const [,,cmd,tenant] = process.argv
cds_mtx(cmd, tenant).catch(console.error)
