module.exports = Object.assign(unsubscribe, {
    init: on => new (require('../lib/client/subscription'))(on),
    options: ['--from', '--user'],
    flags: ['--local'],
    shortcuts: ['-f', '-u', '-l'],
    help: `
# SYNOPSIS

    *cds unsubscribe* <tenant>

    Unsubscribe a tenant from a multitenant SaaS app.

    Running *cds unsubscribe* with a URL is intended for non-productive use only, including against
    SaaS apps running on localhost with mock authentication.

# OPTIONS

    *-f* | *--from* <url>

        Specify the URL of the SaaS app. Determined from the current user's active CDS or
        Cloud Foundry login by default.

    *-u* | *--user* <name>[:[<password>]]

        Username and optionally password for authentication with Basic Auth in test scenarios.
        Required setting if URL is given. (Tokens saved with *cds login* are not used because they
        are unsuitable for this command.)

    *-l* | *--local*

        Run a locally-installed @sap/cds-mtxs and connect to it instead of a URL. Ignore settings
        saved with *cds login*.


# SEE ALSO

    *cds login* for more information on authentication options.
    *cds login* to save project settings, simplifying multiple runs of this command.

`});


async function unsubscribe([tenant], options = {}) {
    const { CliError } = require('../lib/client/helper/errors');
    if (!tenant) {
        throw new CliError('Tenant not given.', { command: 'unsubscribe' });
    }
    const libOptions = { tenant };
    if (options.local) {
        libOptions.local = true;
        delete options.local;
        if (options.user) {
            throw new CliError('Username cannot be specified when running @sap/cds-mtxs locally.', { command: 'subscribe' });
        }
        if (options.from) {
            throw new CliError('URL cannot be specified when running @sap/cds-mtxs locally.', { command: 'unsubscribe' });
        }
    }
    const [username, password] = options.user?.split(':') ?? [];
    delete options.user;

    await unsubscribe.init(false).run({
        ...options,
        username,
        password
    }, libOptions);
}
