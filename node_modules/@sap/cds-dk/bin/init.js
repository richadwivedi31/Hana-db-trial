const { URLS } = require('../lib/init/constants')
const legacyOptions = ['--db-technology', '--insecure', '--java-package', '--modules',
    '--mta', '--odata-version', '--pipeline', '--skip-install', '--skip-sample-models',
    '--srv-memory', '--srv-technology']

module.exports = Object.assign(init, {
    options: ['--add', '--java:mvn', '--java:package', '--lint:custom', '--lint:custom:example', ...legacyOptions],
    shortcuts: [],
    flags: ['--force', '--verbose'],
    help: `
# SYNOPSIS

    *cds init* [<project>] [<options>]

    Initializes a new project in folder ./<project>, with the current
    working directory as default.

# OPTIONS

    *--add* <feature | comma-separated list of features>

        Add one or more features while creating the project.
        <feature> can be one of the following:

        *nodejs*      - prepares as a Node.js-based project, cannot be used with *java*

        *java*        - prepares as a Java-based project, cannot be used with *nodejs*

                      This feature uses the 'Java Maven archetype' to create a project
                      using the *Java* programming language.

        *mtx*         - prepares a multitenant project

                      This version only supports Node.js projects.

        *hana*        - adds configuration for SAP HANA deployment

        *mta*         - adds an _mta.yaml_ file for MTA based SAP Business Technology Platform deployment

        *cf-manifest* - adds _manifest.yml_ and _services-manifest.yml_ files for Cloud Foundry native deployment

                      This approach makes use of the 'Create-Service-Push Plugin' that has to be installed
                      separately using _cf install-plugin Create-Service-Push_.
                      _cf create-service-push_ creates the service(s) and pushes the application(s) to the
                      SAP Business Technology Platform.

        *pipeline*    - adds files for CI/CD pipeline integration

        *samples*     - adds simple sample files

        *notebook*    - adds a Jupyter Notebook (beta)

        *helm*        - adds helm chart folder that contains the files needed to deploy the application using Kyma.

                      To add a specific feature in the helm chart you can use the command 'cds add helm:<featureName>'. 
                      For example cds add helm:xsuaa and cds add helm:html5_apps_deployer.

    *--java:mvn* <Comma separated maven archetype specific parameters>

        Add the given parameters to the archetype call.
        See _${URLS.MAVEN_ARCHETYPE_HELP}_
        for parameters supported by the archetype.

    *--force*

        Overwrite all files.

# EXAMPLES

    *cds init* test
    *cds init* test --add java
    *cds init* test --add java,hana
    *cds init* --add mta
    *cds init* --add cf-manifest
    *cds init* --add java --java:mvn groupId=myGroup,artifactId=newId,package=my.company

# SEE ALSO

    *cds add* as shortcut for _cds init --add_.

`})

async function init (args, options = {}) {
    if (process.argv.some(a => legacyOptions.includes(a))) return _showWarningMessage()
    const CDSGenerator = require('../lib/init')
    const generator = new CDSGenerator()
    await generator.initCmd(args[0], options)
}


function _showWarningMessage () {

    const message = `
  ************************************************
  You are using 'cds init' with older parameters.
  To find out more about the current parameters use

    cds help init

  ************************************************
  `

    const { warn } = require('../lib/util/term');

    console.log(warn(message))
}
