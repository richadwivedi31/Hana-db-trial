module.exports = Object.assign(activate, {
    options: ['--subdomain', '--passcode', '--username', '--clientid', '--to', '--sync'],
    flags: ['--undeploy', '--wsdl'],
    shortcuts: ['-s', '-p', '-u', '-c'],
    help: `
# SYNOPSIS

    *cds activate* [ <extension-project-directory> ]

    Activate an extension project.
    By default, the current working directory is used as project directory.

    To facilitate running this multiple times against the same app, refer to the *cds login* command.


# OPTIONS

    *--to* <url>

        Specify the URL of the extensible SaaS app. By default, it's determined from project settings.

    *-s* | *--subdomain* <tenant-subdomain>

        Specify your tenant's subdomain. By default, it's determined from project settings.

    *-p* | *--passcode* <passcode>

        Tenant-specific passcode for authentication.
        Also see cds login --help or https://cap.cloud.sap/docs/guides/extensibility/#save-an-authentication-token-for-a-simplified-workflow

    *-u* | *--username* <name>

        Deprecated. Use the passcode parameter.

    *-c* | *--clientid* <clientid>

        Client ID for authentication. This will override the default Client ID from environment.

    *--undeploy*

        Undeploy a previously deployed extension, e.g. to remove a renamed or otherwise obsolete extension.

    *--sync*

        Use the synchronous server API to upload extensions.

`})


async function activate ([projectFolder], options = {}) {
    const injection = {
        cds: require('../lib/cds')
    }

    Object.assign(options, { projectFolder })

    await require('../lib/client/activate').run(injection, options);
}



/* eslint no-console: off */
