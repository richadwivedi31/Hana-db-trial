let cds;
const BaseCommand = require('./base_command');
const { CliError } = require('./helper/errors');
const { ParamCollection } = require('./params');
const AuthManager = require('./auth_manager');
const { capitalize } = require('./helper/string_helper');
const { debug } = require('./helper/logging');

module.exports = class ToggleSubscription extends BaseCommand {

    /**
     * @param on {boolean} whether to switch subscription on
     */
    constructor(on) {
        super();
        const prefix = on ? '' : 'un';
        this.command = prefix + 'subscribe';
        this.gerund = prefix + 'subscribing';
        this.noun = prefix + 'subscription';
        this.preposition = on ? 'to' : 'from';
    }

    async run(paramValues, { tenant, local } = {}) {
        cds = require('../cds');
        let params = new ParamCollection(paramValues);
        params.set('skipToken', true); // Token would have insufficient scopes for this command.
        if (local) {
            // Connect to locally-served MTXS
            await this.runWithServer(params, tenant);
        } else {
            // Connect to running MTXS server
            params = await AuthManager.login(params.toValueMap());
            if (!params.has('username')) {
                throw new CliError('Username is required if app URL is given.', { command: this.command });
            }
            await this.runClientOnly(params, tenant);
        }
        console.log(`${capitalize(this.noun)} successful.`);
    }

    async runClientOnly(params, tenant) {
        console.log(capitalize(this.gerund), { tenant }, this.preposition, { url: params.get('appUrl') });
        const url = `${params.get('appUrl')}/-/cds/deployment/${this.command}`;
        debug(`Sending request to ${url}`);
        try {
            await require('axios').post(url, { tenant }, params.get('reqAuth'));
        } catch (error) {
            BaseCommand.handleHttpError(error, params, { url });
        }
    }

    async runWithServer(params, tenant) {
        if (!this.hasMtEnv()) {
            throw new CliError('Local multitenant application environment with @sap/cds-mtxs module not found.', { command: this.command });
        }

        console.log(capitalize(this.gerund), { tenant });
        const { 'cds.xt.DeploymentService': deploymentService } = await cds.serve([
            '@sap/cds-mtxs/srv/deployment-service',
            '@sap/cds-mtxs/srv/model-provider'
        ]);
        cds.emit('served');
        if (this.command === 'unsubscribe') {
            // MTXS doesn't connect automatically because unsubscribe requires no schema changes
            await cds.connect.to('db');
        }

        await deploymentService[this.command](tenant);

        if (cds.db) {
            await cds.disconnect(cds.env.requires.multitenancy?.t0 ?? 't0'); // REVISIT: Ideally not necessary
        }
    }

    /**
     * Check for application environment.
     * Fails for edge cases (ignored for now):
     * - @sap/cds-mtx application with missing modules (no npm install)
     * - dev scenario with both @sap/cds-mtx and @sap/cds-mtxs installed
     */
    hasMtEnv() {
        return cds.requires.multitenancy && !cds.mtx;
    }
}
