

/**
 * Called from wrapper modules
 */
export interface CDSGenerator {
  /**
   * Initializes the generator and starts generation
   * @param projectName the new project name or null
   * @param options the current options
   */
  stepInit(projectName: string, options: any): Promise<void>;

  /**
   * Displays a final message
   */
  stepEnd(): Promise<void>;

  /**
   * Contains the parameter description
   * DEPRECATED: use uiConfig
   */
  config?: any;

  /**
   * Contains the parameter description
   */
  uiConfig?: any;
}

/**
 * This is a helper interface to provide support for different file system implementations.
 * Depending on the scenario different file systems will be used, e.g. Yeoman vs. native FS.
 */
export interface FsUtil {
  /**
   * Writes the given string into a file.
   * @param filepath the absolute file path
   * @param content the string to serialize to JSON
   */
  writeFile(filePath: string, content: string, skipLogFile?: boolean): Promise<void>;

  /**
   * Writes the given object as JSON into a file.
   * @param filepath the absolute file path
   * @param object the object to serialize to JSON
   */
  writeJSON(filepath: string, object: any, options?: any): Promise<void>;

  /**
   * Writes YAML object
   * @param filepath the absolute file path
   * @param yaml the yaml object
   * @param skipFileLog do not log files if true
   */
  writeYAML(filepath: string, yaml: any, skipFileLog?: boolean): Promise<void>;

  /**
   * Reads a file from given path.
   * @param filePath the absolute file path
   * @param options optional read options
   * @returns the file content as string
   */
  readFile(filePath: string, options?: any): Promise<string>;

  /**
   * Reads a JSON object from a file.
   * @param filePath the absolute file path
   * @param projectDescriptor a project descriptor
   * @returns the file content as object
   */
  readJSON(filePath: string, projectDescriptor: any): Promise<any>;

  /**
   * Reads a JSON object from a file.
   * @param filePath the absolute file path
   * @returns the file content as object
   */
  readJSONC(filePath: string): Promise<any>;

  /**
   * Reads a JSON object from a file.
   * @param filePath the absolute file path
   * @param projectDescriptor a project descriptor
   * @returns the file content as yaml object
   */
  readYAML(filePath: string, projectDescriptor: any): Promise<any>;

  /**
  * Copies a file or folder from given source to destination.
  * @param source the source path
  * @param destination the destination path
  * @param options optional copy options
  * @param skipFileLog do not log files if true
  */
  copy(source: string, destination: string, options?: any, skipFileLog?: boolean): Promise<void>;
}

/**
 * Helper for managing npm related tasks
 * @deprecated
 */
export interface NpmUtil {
  /**
   * Installs npm packages
   * @param cwd working folder
   * @param options npm install options, e.g. force
   */
  install(cwd?: string, options?: any): Promise<void>
}
