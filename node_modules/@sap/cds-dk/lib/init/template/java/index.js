const fs = require('fs').promises;
const os = require('os');
const { join, relative } = require('path');

const commandUtil = require('../../util/commandUtil');
const mvnArchetypeUtil = require('../../util/mvnArchetypeUtil');
const term = require('../../../util/term');
const cds = require('../../../cds')
const { exists, copy } = cds.utils
const LOG = console

const { COMMAND_ADD, URLS, OPTION_JAVA, OPTION_NODEJS } = require('../../constants');

module.exports = class JavaTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
    }

    static hasFacet(_, projectPath) {
        return exists(join(projectPath, 'pom.xml'))
    }

    async canRun() {
        if (this.options._cmd === COMMAND_ADD) {
            throw new Error(`You can't change the type of an existing project.`);
        }

        if (this.options.add.has(OPTION_NODEJS)) {
            throw new Error(`Only one runtime per project is supported. Specify either ${OPTION_JAVA} or ${OPTION_NODEJS}.`);
        }

        return true;
    }

    async run() {
        const mvnCmdArgs = mvnArchetypeUtil.getGenerateCmdArgs(this.projectName, this.options);
        const { cmdLine, artifactId, archetypeVersion } = mvnCmdArgs

        LOG.info(`Using Maven archetype version ${archetypeVersion}`);

        const tempFolder = await fs.mkdtemp(join(os.tmpdir(), `${this.projectName}_`));
        try {
            await commandUtil.spawnCommand('mvn', cmdLine, {
                cwd: tempFolder
            });

            await copy(join(tempFolder, artifactId), this.projectPath);
        } catch (err) {
            if (err.code === 'ENOENT' && err.path === 'mvn') {
                throw new Error(`Maven executable 'mvn' not found, follow ${term.info(URLS.MAVEN_INSTALL_HELP)} and install Maven on your machine.`);
            }
            throw err;
        } finally {
            await fs.rm(tempFolder, { force: true, recursive: true });
        }
    }

    async finalize() {
        const relativeProjectPath = relative(this.cwd, this.projectPath);
        if (relativeProjectPath && relativeProjectPath !== '.') {
            LOG.info(`Continue with 'cd ${relativeProjectPath}'`);
        }

        LOG.info(`Learn about next steps at ${URLS.CAPIRE}`);
    }
}
