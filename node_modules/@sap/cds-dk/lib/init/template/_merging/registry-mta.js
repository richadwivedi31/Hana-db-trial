// Registry of sequence matchers in mta.yaml files

const srvNode = {
    ref: 'srv',
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: 'nodejs'
    }],
}

const srvJava = {
    ref: 'srv',
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: 'java'
    }],
}

const approuter = {
    ref: 'approuter',
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: 'approuter.nodejs'
    }]
}

const xsuaa = {
    ref: 'uaa-resource',
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'xsuaa',
    }, {
        property: 'parameters.service-plan',
        isEqualTo: 'application'
    }]
}

const auditlog = {
    ref: 'auditlog-resource',
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'auditlog-api',
    }]
}

const enterpriseMessaging = {
    ref: 'enterprise-messaging-resource',
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'enterprise-messaging',
    }]
}

const kibanaLogging = {
    ref: 'cf-logging',
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'application-logs',
    }, {
        property: 'parameters.service-plan',
        isEqualTo: 'lite',
    }]
}

const hdbDeployer = {
    ref: 'deployer',
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: 'hdb'
    }]
}

const hdiContainer = {
    ref: 'hdi-container-resource',
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'com.sap.xs.hdi-container',
    }]
}

const serviceManager = {
    ref: 'service-manager-resource',
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'service-manager',
    }, {
        property: 'parameters.service-plan',
        isEqualTo: 'container'
    }]
}

const saasRegistry = {
    ref: 'registry-resource',
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'saas-registry',
    }]
}

const srvAPI = {
    ref: 'srvAPI',
    in: 'provides',
    where: [{
        property: 'name',
        isEqualTo: 'srv-api'
    }, {
        property: 'properties.srv-url',
        isEqualTo: '${default-url}'
    }]
}

const mtxSidecar = {
    ref: 'sidecar',
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: `nodejs`
    }, {
        property: 'path',
        isEqualTo: `mtx/sidecar`
    }]
}

const providedMtxAPI = {
    ref: 'provided-mtx-api',
    in: 'provides',
    where: [{
        property: 'name',
        isEqualTo: 'mtx-api'
    }, {
        property: 'properties.mtx-url',
        isEqualTo: '${default-url}'
    }]
}

const requiredMtxAPI = {
    ref: 'required-mtx-api',
    in: [approuter, 'requires'],
    where: [{
        property: 'properties.name',
        isEqualTo: 'mtx-api'
    }, {
        property: 'properties.url',
        isEqualTo: '~{mtx-url}'
    }]
}

const providedAppAPI = {
    ref: 'provided-app-api',
    in: [approuter, 'provides'],
    where: [{
        property: 'name',
        isEqualTo: 'app-api'
    }, {
        property: 'properties.app-protocol',
        isEqualTo: '${protocol}'
    }, {
        property: 'properties.app-uri',
        isEqualTo: '${default-uri}'
    }],
}

const requiredAppAPI = {
    ref: 'required-app-api',
    in: [srvNode, 'requires'],
    where: [{
        property: 'name',
        isEqualTo: 'app-api'
    }, {
        property: 'properties.SUBSCRIPTION_URL',
        isEqualTo: '~{app-protocol}://\\${tenant_subdomain}-~{app-uri}'
    }]
}

const providedMtxSidecarAPI = {
    ref: 'provided-mtx-sidecar-api',
    in: [mtxSidecar, 'provides'],
    where: [{
        property: 'properties.url',
        isEqualTo: '${default-url}'
    }]
}

const requiredMtxSidecarAPI = {
    ref: 'required-mtx-sidecar-api',
    in: [srvJava, 'requires'],
    where: [{
        property: 'properties.CDS_MULTITENANCY_SIDECAR_URL',
        isEqualTo: '~{url}'
    }]
}

const requiredJavaApprouterAPI = {
    ref: 'required-java-approuter-api',
    in: [srvJava, 'requires'],
    where: [{
        property: 'properties.CDS_MULTITENANCY_APPUI_URL',
        isEqualTo: '~{url}'
    }]
}

const providedJavaApprouterAPI = {
    ref: 'provided-java-approuter-api',
    in: [approuter, 'requires'],
    where: [{
        property: 'properties.url',
        isEqualTo: '${default-url}'
    }]
}

const approuterExtensibility = {
    ref: 'approuter-extensibility',
    in: 'routes',
    where: [{
        property: 'source',
        isEqualTo: '^/-/cds/.*'
    }, {
        property: 'destination',
        isEqualTo: 'mtx-api',
    }, {
        property: 'authenticationType',
        isEqualTo: 'none',
    }]
}

const approuterExtensibilityJava = {
    ref: 'approuter-extensibility-java',
    in: 'routes',
    where: [{
        property: 'source',
        isEqualTo: '^/-/cds/.*'
    }, {
        property: 'destination',
        isEqualTo: 'mtx-api',
    }, {
        property: 'authenticationType',
        isEqualTo: 'none',
    }]
}

module.exports = {
    srvNode,
    srvJava,
    approuter,
    xsuaa,
    auditlog,
    enterpriseMessaging,
    hdbDeployer,
    hdiContainer,
    serviceManager,
    saasRegistry,
    srvAPI,
    mtxSidecar,
    providedMtxAPI,
    requiredMtxAPI,
    providedMtxSidecarAPI,
    requiredMtxSidecarAPI,
    providedAppAPI,
    requiredAppAPI,
    requiredJavaApprouterAPI,
    providedJavaApprouterAPI,
    kibanaLogging,
    approuterExtensibility,
    approuterExtensibilityJava
}
