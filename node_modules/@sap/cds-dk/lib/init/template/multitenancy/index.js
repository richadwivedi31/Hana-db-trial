const { join } = require('path')
const cds = require('../../../cds')
const { copy, exists } = cds.utils
const ProjectReader = require('../../util/projectReader')
const { mergeJSON, mergeYAML, sortDependencies } = require('../../util/merge')
const { copyAndTrack, parseMd5File, writeMd5File } = require('../../util/md5Tracking')
const {
  srvNode, srvJava, // Server
  mtxSidecar, // Additional Modules
  saasRegistry, serviceManager, xsuaa, // BTP Services
  providedMtxAPI, srvAPI, providedMtxSidecarAPI, requiredMtxSidecarAPI // APIs
} = require('../_merging/registry-mta');

module.exports = class MultitenancyTemplate extends require('../templateBase') {
  constructor(projectPath, generator) {
    super(projectPath, generator, __dirname)
    this.projectReader = new ProjectReader(projectPath)
  }

  static hasFacet(env, projectPath, options) {
    // REVISIT: Check if this can be simplified
    return options?.add?.has('mtx') || options?.add?.has('multitenancy') ||
           !!env.requires?.multitenancy || !!env.requires?.db?.multiTenant ||
           this.isJava && exists(join(projectPath, 'mtx', 'sidecar')) || false
  }

  async run() {
    const projectDescriptor = await this.projectReader.read(this.options)
    const { for: forProfile, isNodejs, isJava } = projectDescriptor.cap
    if (isNodejs) {
      const packageJSONPath = join(this.projectPath, 'package.json')
      const cdsTemplateFile = forProfile ? 'cds.package.json.hbs' : 'cds.package.json'
      await mergeJSON(packageJSONPath, join(__dirname, 'files', cdsTemplateFile), projectDescriptor)
      await mergeJSON(packageJSONPath, join(__dirname, 'files', 'dependencies.package.json'))
      await sortDependencies(packageJSONPath)
    } else if (isJava) {
      const cdsrcJSONPath = join(this.projectPath, '.cdsrc.json')
      await mergeJSON(cdsrcJSONPath, join(__dirname, 'files', 'java', '.cdsrc.json'))
      await copy(join(__dirname, 'files', 'java', 'package.json'), join(this.projectPath, 'mtx', 'sidecar', 'package.json'))
    }
    await this.runDependentMerging()
  }

  async runDependentMerging(context = {}) {
    const projectDescriptor = await this.projectReader.read()
    const { isNodejs, isJava, hasMta, hasHelm, hasApprouter, hasXsuaa, hasHana } = projectDescriptor.cap

    if (hasMta) {
      const modules = isNodejs ? [srvNode] : [srvJava, mtxSidecar]
      const srv = isNodejs ? srvNode : srvJava
      const services = [saasRegistry]
      if (hasXsuaa) services.push(xsuaa)
      const apis = isNodejs ? [providedMtxAPI] : [srvAPI, providedMtxAPI, providedMtxSidecarAPI, requiredMtxSidecarAPI]
      const additions = [...modules, ...services, ...apis]

      const overwrites = hasXsuaa ? [{ item: [xsuaa, 'parameters.config.tenant-mode'], withValue: 'shared'}] : []

      const relationships =  [{
        insert: [saasRegistry, 'name'],
        into: [srv, 'requires', 'name']
      }]
      if (isJava) {
        if (hasXsuaa) {
          relationships.push({
            insert: [xsuaa, 'name'],
            into: [mtxSidecar, 'requires', 'name']
          })
        }
        if (hasHana) {
          relationships.push({
            insert: [serviceManager, 'name'],
            into: [mtxSidecar, 'requires', 'name'],
          })
        }
      }

      const templateMtaPath = join(__dirname, `files`, `mta.yaml.hbs`)
      const mtaPath = join(this.projectPath, 'mta.yaml')
      const mergingRules = { additions, overwrites, relationships }
      await mergeYAML(mtaPath, templateMtaPath, projectDescriptor, mergingRules)
    }

    let isIndependentCommand = false
    if (hasHelm) {
      //in case facet is being added to the already exisiting charts folder
      if (Object.keys(context).length == 0) {
        isIndependentCommand = true
        context.projectPath = this.projectPath
        context.oldTrackingData = context.newTrackingData = await parseMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'))
      }

      await mergeYAML(
        join(this.projectPath, 'chart', 'values.yaml'),
        join(__dirname, 'files', 'values.yaml.hbs'),
        projectDescriptor
      )

      await mergeYAML(
        join(this.projectPath, 'chart', 'values.yaml'),
        {
          srv: {
            envFrom: [
              {
                configMapRef: {
                  name: "{{ .Release.Name }}-mtxs-configmap"
                }
              }
            ]
          }
        },
        projectDescriptor
      )

      if (isJava) {
        await mergeYAML(
          join(this.projectPath, 'chart', 'Chart.yaml'),
          join(__dirname, 'files', 'chart.yaml'),
          projectDescriptor,
          {
            additions: [{
              ref: `web-application-sidecar`,
              in: `dependencies`,
              where: [{
                property: 'alias',
                isEqualTo: 'sidecar'
              }]
            }]
          }
        )
      }

      const mtxsConfigmapPath = isNodejs
                                ? join(__dirname, 'files', 'mtxs-configmap.yaml')
                                : join(__dirname, 'files', 'java', 'mtxs-configmap.yaml');

      // add mtxs configmap
      await copyAndTrack(
        mtxsConfigmapPath,
        join(this.projectPath, 'chart', 'templates', 'mtxs-configmap.yaml'),
        context
      )

      await copyAndTrack(
        join(__dirname, 'files', 'service-manager.yaml'),
        join(this.projectPath, 'chart', 'templates', 'service-manager.yaml'),
        context
      )

      await copyAndTrack(
        join(__dirname, 'files', 'saas-registry.yaml'),
        join(this.projectPath, 'chart', 'templates', 'saas-registry.yaml'),
        context
      )
      if (isIndependentCommand) await writeMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'), context.newTrackingData)
    }

    if (hasApprouter) {
      const ApprouterTemplate = require(`../approuter`)
      const template = new ApprouterTemplate(this.projectPath, this.generator)
      await template.runDependentMerging(context)
    }

    if (hasHana) {
      const HanaTemplate = require(`../hana`)
      const template = new HanaTemplate(this.projectPath, this.generator)
      await template.runDependentMerging(context)
    }

    if (hasXsuaa) {
      await mergeJSON(
        join(this.projectPath, 'xs-security.json'),
        join(__dirname, 'files', 'xs-security.json.hbs'),
        projectDescriptor,
        {
          additions: [{
            ref: 'scope-mtcallback',
            in: 'scopes',
            where: [{ property: 'name', isEqualTo: '$XSAPPNAME.mtcallback' }],
          }]
        }
      )
    }

    if (hasXsuaa && hasHelm) {
      // REVISIT: Shared xs-security.json location for Helm and MTA?
      await copyAndTrack(
        join(this.projectPath, 'xs-security.json'),
        join(this.projectPath, 'chart', 'xs-security.json'),
        context
      )

      await mergeYAML(
          join(this.projectPath, 'chart', 'values.yaml'),
          {
              xsuaa: {
                  parameters: {
                      'tenant-mode': 'shared'
                  }
              }
          },
          null,
          { forceOverwrite: true }
      )
      if (isIndependentCommand) await writeMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'), context.newTrackingData)
    }
  }
}
