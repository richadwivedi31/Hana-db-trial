const { join } = require('path')
const { exists } = require('../../../cds').utils
const ProjectReader = require('../../util/projectReader')
const { mergeYAML } = require('../../util/merge')
const { copyAndTrack, parseMd5File, writeMd5File } = require('../../util/md5Tracking')
const { OPTION_DESTINATIONS } = require('../../constants')

module.exports = class Html5RepoTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(projectPath)
    }

    getDependencies() {
        return [OPTION_DESTINATIONS]
    }

    async canRun() {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { hasMta, hasHelm } = projectDescriptor.cap
        if (!hasHelm && hasMta) {
            throw `'cds add html5-repo' is not available for Cloud Foundry yet`
        }
        return true
    }

    static hasFacet(_, projectPath) {
        // REVISIT: Should be detectable without helm charts
        return exists(join(projectPath, 'chart', 'templates', 'html5-apps-repo-host.yaml'))
    }

    async run() {
        await this.runDependentMerging()
    }

    async runDependentMerging(context = {}) {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { appName, hasHelm } = projectDescriptor.cap

        if (hasHelm) {
            //in case facet is being added to the already exisiting charts folder
            let isIndependentCommand = false
            if(Object.keys(context).length == 0){
                isIndependentCommand = true
                context.projectPath = this.projectPath
                context.oldTrackingData = context.newTrackingData = await parseMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'))
            }
            await mergeYAML(
                join(this.projectPath, 'chart', 'values.yaml'),
                {
                    html5_apps_repo_host: {
                        serviceOfferingName: 'html5-apps-repo',
                        servicePlanName: 'app-host'
                    },
                    'html5-apps-deployer': {
                        env: {
                            SAP_CLOUD_SERVICE: null
                        },
                        envFrom: [
                            {
                              configMapRef: {
                                name: "{{ .Release.Name }}-html5-apps-deployer-configmap",
                                tpl: true
                              }
                            }
                        ],
                        image: {
                            repository: `<your-container-registry>/${appName}-html5-deployer`,
                            tag: 'latest'
                        },
                        bindings: {
                            xsuaa:           { serviceInstanceName: 'xsuaa' },
                            destination:     { serviceInstanceName: 'destination' },
                            'html5-apps-repo': { serviceInstanceName: 'html5-apps-repo-host' }
                        },
                        resources: {
                            limits:   { cpu: '2000m', memory: '1G' },
                            requests: { cpu: '1000m', memory: '1G' }
                        }
                    },
                    backendDestinations: {},
                }
            )
            
            // copy content deployment chart if it is not present
            const contentDeploymentSubchartPath = join(this.projectPath, 'chart', 'charts', 'content-deployment');
            if(!exists(contentDeploymentSubchartPath)) {
                const contentDeploymentResourcePath = join(__dirname, '..', 'helm', 'subcharts', 'content-deployment');
                await copyAndTrack(contentDeploymentResourcePath, contentDeploymentSubchartPath, context);
            }

            // add dependency entry in chart.yaml
            await mergeYAML(
                join(this.projectPath, 'chart', 'Chart.yaml'),
                join(__dirname, 'files', 'chart.yaml'),
                projectDescriptor,
                { additions: [{
                    ref: `content-deployment-html5-apps-deployer`,
                    in: `dependencies`,
                    where: [{
                        property: 'alias',
                        isEqualTo: 'html5-apps-deployer'
                    }]
                }]}
            )

            await copyAndTrack(join(__dirname, 'files', 'html5-apps-deployer-configmap.yaml'), join(this.projectPath, 'chart', 'templates', 'html5-apps-deployer-configmap.yaml'), context)
            await copyAndTrack(join(__dirname, 'files', 'html5-apps-repo-host.yaml'), join(this.projectPath, 'chart', 'templates', 'html5-apps-repo-host.yaml'), context)
            if(isIndependentCommand) await writeMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'), context.newTrackingData)
        }
    }
}
