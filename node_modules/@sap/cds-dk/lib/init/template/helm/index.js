const { join } = require('path');
const { exists, rimraf } = require('../../../cds').utils;
const ProjectReader = require('../../util/projectReader');
const { mergeYAML } = require('../../util/merge')
const { parseMd5File, writeMd5File, copyAndTrack } = require('../../util/md5Tracking')
//const { yaml } = require('@sap/cds-foss')

module.exports = class HelmTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
        this.projectReader = new ProjectReader(projectPath);
        this.oldTrackingData = undefined;
        this.newTrackingData = {};
    }

    static hasFacet(_, projectPath, options) {
        // REVISIT: this works, but could be semantically nicer with a 'shouldRunDependentMerging' or the like
        if (options?.add.has('mta') && !options?.add.has('helm')) return false
        return exists(join(projectPath, 'chart', 'values.yaml'))
    }

    async canRun() {
        if (this.options.force) {
            await rimraf(join(this.projectPath, 'chart'))
            return true;
        }
        return true;
    }

    async run() {
        const projectDescriptor = await this.projectReader.read(this.options)
        this.oldTrackingData = await parseMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'));

        await copyAndTrack(
            join(__dirname, 'subcharts', 'web-application'),
            join(this.projectPath, 'chart', 'charts', 'web-application'),
            this
        )
        await copyAndTrack(
            join(__dirname, 'chart'),
            join(this.projectPath, 'chart'),
            this
        )

        await mergeYAML(
            join(this.projectPath, 'chart', 'Chart.yaml'),
            join(__dirname, 'files', 'Chart.yaml.hbs'),
            projectDescriptor
        )

        await mergeYAML(
            join(this.projectPath, 'chart', 'values.yaml'),
            join(__dirname, 'files', 'values.yaml.hbs'),
            projectDescriptor
        )
        await this.runDependentMerging();
        await writeMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'), this.newTrackingData);
    }

    async runDependentMerging() {
        // Re-applying the dependent merging part of other facets if necessary.
        const dependentFacets = ['hana', 'xsuaa', 'auditlog', 'enterprise-messaging', 'destinations' , 'multitenancy', 'extensibility', 'approuter']
        for (const facet of dependentFacets) {
            const Template = require('../'+facet)
            const template = new Template(this.projectPath, this.generator)
            if (Template.hasFacet(await this.getEnv(), this.projectPath, this.options)) await template.runDependentMerging(this)
        }
    }
};
