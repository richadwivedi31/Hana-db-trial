const { join } = require('path');
const cds = require('../../../cds')
const { read, write, exists, rm, rmdir } = cds.utils
const commandUtil = require('../../util/commandUtil');
const mvnArchetypes = require('../../util/mvnArchetypeUtil');
const term = require('../../../util/term');
const { mergeJSON, mergeYAML, removeFromYAML, removeFromYAMLArray } = require('../../util/merge')
const { copyAndTrack, parseMd5File, writeMd5File } = require('../../util/md5Tracking')
const { copyFiles } = require('../../util/templateUtil')
const ProjectReader = require('../../util/projectReader');
const versionCompare = require('../../util/versionCompare');

const { PROJECT_TYPE, OPTION_JAVA, URLS } = require('../../constants');

const { srvNode, srvJava, hdbDeployer, serviceManager, hdiContainer, mtxSidecar } = require('../_merging/registry-mta');

module.exports = class HanaTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
        this.projectReader = new ProjectReader(projectPath);
    }

    static hasFacet(env) {
        return env.requires?.db?.kind === 'hana'
    }

    async canRun() {
        const cds = require('../../../cds')
        if (versionCompare(cds.version, '5.9.0') < 0) {
            cds.error('The added configuration requires @sap/cds 5.9.0 or higher. Please update @sap/cds to the latest version and run \x1b[1mcds add hana\x1b[0m again.')
        }
        return true
    }

    async run() {
        const env = await this.getEnv();

        const hdiConfigPath = join(this.projectPath, env.folders.db, 'src', '.hdiconfig');
        const hdiConfigTemplatePath = join(__dirname, 'files', 'common', 'src', '.hdiconfig');
        await mergeJSON(hdiConfigPath, hdiConfigTemplatePath);

        const undeployJSONPath = join(this.projectPath, env.folders.db, 'undeploy.json');
        const undeployJSONTemplatePath = join(__dirname, 'files', 'common', 'undeploy.json');
        await mergeJSON(undeployJSONPath, undeployJSONTemplatePath);

        const projectType = await this.getProjectType();
        switch (projectType) {
            case PROJECT_TYPE.java: {
                await copyFiles(join(__dirname, 'files', 'java', 'db'), join(this.projectPath, env.folders.db), {}, this.options.force);
                await this._updatePomXml();
                await this._updateCdsConfiguration();
                break;
            }
            case PROJECT_TYPE.nodejs: {
                await this._updatePackageJson()
                break;
            }
            default: break;
        }
        await this.runDependentMerging()
    }

    async removeEntriesFromContext(context, key, pattern = false) {
        if(pattern) {
            Object.keys(context.oldTrackingData).forEach(fileName => {
                if (fileName.startsWith(key)) {
                  delete context.oldTrackingData[fileName];
                }
            });

            Object.keys(context.newTrackingData).forEach(fileName => {
                if (fileName.startsWith(key)) {
                  delete context.newTrackingData[fileName];
                }
            });
        } else {
            // remove entry from oldTrackingData
            if(context.oldTrackingData !== undefined && context.oldTrackingData[key] !== undefined) {
                delete context.oldTrackingData[key];
            }

            // remove entry from newTrackingData
            if(context.newTrackingData !== undefined && context.newTrackingData[key] !== undefined) {
                delete context.newTrackingData[key];
            }
        }
    }
    
    async runDependentMerging(context = {}) {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { hasMta, hasHelm, hasHtml5Repo, isNodejs, isJava, isMultitenant } = projectDescriptor.cap

        if (isMultitenant) {
            await this._updateCdsConfiguration()
        }

        if (hasMta) {
            const srv = isNodejs ? srvNode : srvJava
            const db = isMultitenant ? serviceManager : hdiContainer
            const deletions = isMultitenant ? [{
                item: hdbDeployer,
                relationships: [{
                    removeProperty: 'name',
                    allWithin: ['modules', 'requires', 'name'],
                }]
            }, {
                item: hdiContainer,
                relationships: [{
                    removeProperty: 'name',
                    allWithin: ['modules', 'requires', 'name'],
                }]
            }] : []

            const mtaYAMLPath = join(this.projectPath, 'mta.yaml')

            const relationships = [{
                insert: [db, 'name'],
                into: [srv, 'requires', 'name']
            }]

            if (!isMultitenant) {
                relationships.push({
                    insert: [hdiContainer, 'name'],
                    into: [hdbDeployer, 'requires', 'name']
                })
            }

            if (isJava && isMultitenant) {
                relationships.push({
                    insert: [serviceManager, 'name'],
                    into: [mtxSidecar, 'requires', 'name']
                })
            }

            const modules = !isMultitenant ? [srv, hdbDeployer] : [srv]

            await mergeYAML(
                mtaYAMLPath,
                `${__dirname}/files/mta.yaml.hbs`,
                projectDescriptor,
                { additions: [...modules, db].filter(a => a), deletions, relationships }
            )
        }

        if (hasHelm) {
            //in case facet is being added to the already exisiting charts folder
            let shouldUpdateTrackingFile = false;
            if(Object.keys(context).length == 0){
                shouldUpdateTrackingFile = true;
                context.projectPath = this.projectPath;
                context.oldTrackingData = context.newTrackingData = await parseMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'));
            }

            if(isMultitenant){
                shouldUpdateTrackingFile = true;

                const instanceTemplateKey = "templates/hana.yaml";
                await this.removeEntriesFromContext(context, instanceTemplateKey);

                // remove hana entries from values.yaml
                await removeFromYAML(join(this.projectPath, 'chart', 'values.yaml'), ['hana-deployer', 'srv.bindings.db', 'hana']);

                // remove hana entries from Chart.yaml
                await removeFromYAMLArray(join(this.projectPath, 'chart', 'Chart.yaml'), 'dependencies', 'hana-deployer');

                // remove content-deployment subchart if html5Repo doesn't exist
                if(!hasHtml5Repo) {
                    const contentDeploymentEntriesPattern = "charts/content-deployment/"
                    await this.removeEntriesFromContext(context, contentDeploymentEntriesPattern, true);

                    const contentDeploymentSubchartPath = join(this.projectPath, 'chart', 'charts', 'content-deployment');
                    if(exists(contentDeploymentSubchartPath)) {
                        await rmdir(contentDeploymentSubchartPath);
                    }
                }

                const hanaInstanceTemplatePath = join(this.projectPath, 'chart', 'templates', 'hana.yaml');
                if(exists(hanaInstanceTemplatePath)) {
                    await rm(hanaInstanceTemplatePath);
                }
            } else {
                await mergeYAML(
                    join(this.projectPath, 'chart', 'values.yaml'),
                    join(__dirname, 'files', 'values.yaml.hbs'),
                    projectDescriptor
                )
                await copyAndTrack(
                    join(__dirname, 'files', 'hana.yaml'),
                    join(this.projectPath, 'chart', 'templates', 'hana.yaml'),
                    context
                )

                // copy content deployment chart if it is not present
                const contentDeploymentSubchartPath = join(this.projectPath, 'chart', 'charts', 'content-deployment');
                if(!exists(contentDeploymentSubchartPath)) {
                    const contentDeploymentResourcePath = join(__dirname, '..', 'helm', 'subcharts', 'content-deployment');
                    await copyAndTrack(contentDeploymentResourcePath, contentDeploymentSubchartPath, context);
                }

                // add dependency entry in chart.yaml
                await mergeYAML(
                    join(this.projectPath, 'chart', 'Chart.yaml'),
                    join(__dirname, 'files', 'chart.yaml'),
                    projectDescriptor,
                    { additions: [{
                        ref: `content-deployment-hana-deployer`,
                        in: `dependencies`,
                        where: [{
                            property: 'alias',
                            isEqualTo: 'hana-deployer'
                        }]
                    }]}
                )
            }
            if(shouldUpdateTrackingFile) await writeMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'), context.newTrackingData);
        }
    }

    async _updatePomXml() {
        // if called during cds init the project generation call to AT will add settings
        if (!this.options.add.has(OPTION_JAVA)) {
            const mvnAddHanaArgs = mvnArchetypes.getAddHanaCmdArgs(this.options);
            try {
                await commandUtil.spawnCommand('mvn', mvnAddHanaArgs, {
                    cwd: this.projectPath
                });
            } catch (err) {
                if (err.code === 'ENOENT' && err.path === 'mvn') {
                    throw new Error(`Maven executable 'mvn' not found, follow ${term.info(URLS.MAVEN_INSTALL_HELP)} and install Maven on your machine.`);
                }
                throw err;
            }
        }
    }

    async _updatePackageJson() {
        const packageJsonPath = join(this.projectPath, 'package.json')
        const dependenciesTemplatePath = join(__dirname, 'files', 'nodejs', 'dependencies.package.json');
        await mergeJSON(packageJsonPath, dependenciesTemplatePath);

        const packageJson = await read(packageJsonPath);
        if ('@sap/hana-client' in packageJson.dependencies) {
            delete packageJson.dependencies['@sap/hana-client'];
            await write(packageJsonPath, packageJson, { spaces: 2 });
        }

        await this._updateCdsConfiguration()
    }

    async _updateCdsConfiguration(configPath) {
        const projectType = await this.getProjectType();
        const configFile = projectType === PROJECT_TYPE.nodejs ? 'package.json' : '.cdsrc.json';
        configPath = configPath ?? join(this.projectPath, configFile)
        const projectDescriptor = await this.projectReader.read(this.options);
        const { for: forProfile } = projectDescriptor.cap;
        let json; try { json = await read(configPath, 'utf8') } catch { /* ignore */ }
        const _cds = projectType === PROJECT_TYPE.nodejs ? json?.cds : json;
        const shortcut = typeof _cds?.requires?.db === 'string' || !json ? 'shortcut.' : '';
        const profile = forProfile ? 'profile.' : '';
        const cdsTemplateFile = `cds.${shortcut}${profile}json.hbs`
        const { pLanguage } = projectDescriptor.cap;
        const cdsTemplatePath = join(__dirname, 'files', pLanguage, cdsTemplateFile);
        await mergeJSON(configPath, cdsTemplatePath, projectDescriptor, { forceOverwrite: true })
    }
}
