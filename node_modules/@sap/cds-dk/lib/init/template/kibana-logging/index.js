const { join } = require('path')
const cds = require('../../../cds')
const ProjectReader = require('../../util/projectReader')
const { mergeJSON, mergeYAML } = require('../../util/merge')
const { PROJECT_TYPE, } = require('../../constants')
const { srvNode, srvJava, kibanaLogging } = require('../_merging/registry-mta')

module.exports = class KibanaTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(projectPath)
    }

    async canRun() {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { hasMta, hasHelm } = projectDescriptor.cap
        if (hasHelm && !hasMta) {
            throw `'cds add kibana-logging' is not available for Kyma yet`
        }
        return true
    }

    async run() {
        const projectType = await this.getProjectType()

        switch (projectType) {
            case PROJECT_TYPE.java:
            default:
                cds.error(`kibana-logging is not implemented for project type '${projectType}' yet`)
                // TODO: implement
                break
            case PROJECT_TYPE.nodejs: {
                const projectDescriptor = await this.projectReader.read(this.options);
                const { for: forProfile } = projectDescriptor.cap
                const cdsTemplateFile = forProfile ? 'cds.profile.package.json.hbs' : 'cds.package.json'
                const cdsTemplatePath = join(__dirname, 'files', cdsTemplateFile)
                await mergeJSON(join(this.projectPath, 'package.json'), cdsTemplatePath, projectDescriptor)
            }
        }
        await this.runDependentMerging()
    }

    async runDependentMerging() {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { hasMta, isNodejs } = projectDescriptor.cap

        if (hasMta) {
            const srv = isNodejs ? srvNode : srvJava

            const mtaYAMLPath = join(this.projectPath, 'mta.yaml')
            await mergeYAML(
                mtaYAMLPath,
                join(__dirname, 'files', 'mta.yaml.hbs'),
                projectDescriptor,
                {
                    additions: [srv, kibanaLogging],
                    relationships: [{
                        insert: [kibanaLogging, 'name'],
                        into: [srv, 'requires', 'name']
                    }],
                }
            )
        }
    }
}
