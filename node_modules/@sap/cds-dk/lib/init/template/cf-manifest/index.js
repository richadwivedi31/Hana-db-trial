const { join } = require('path')
const { exists } = require('../../../cds').utils
const ProjectReader = require('../../util/projectReader');
const { copyFiles } = require('../../util/templateUtil')
const { OPTION_CF_MANIFEST } = require('../../constants')
const MANIFEST_FILE = 'manifest.yml'
const SERVICES_MANIFEST_FILE = 'services-manifest.yml'

module.exports = class ManifestTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(projectPath)
    }

    async canRun() {
        if (!this.options.add.has(OPTION_CF_MANIFEST)) {
            return false;
        }

        if (this.options.force) {
            return true;
        }

        if (exists(join(this.projectPath, MANIFEST_FILE)) || exists(join(this.projectPath, SERVICES_MANIFEST_FILE))) {
            throw new Error(`File ${MANIFEST_FILE} or ${SERVICES_MANIFEST_FILE} already exist in current folder. Use --force to overwrite.`);
        }
        return true;
    }

    async run() {
        const projectDescriptor = await this.projectReader.read()
        await copyFiles(join(__dirname, 'files'), this.projectPath, projectDescriptor, this.options.force);
    }
}
