const { join } = require('path');
const { copyFiles } = require('../../util/templateUtil')
const commandUtil = require('../../util/commandUtil');
const mvnArchetypes = require('../../util/mvnArchetypeUtil');
const term = require('../../../util/term');
const { PROJECT_TYPE, OPTION_JAVA, URLS } = require('../../constants');

module.exports = class SamplesTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
    }

    async run() {
        switch (await this.getProjectType()) {
            case PROJECT_TYPE.java:
                return await this._addJavaSamples();

            case PROJECT_TYPE.nodejs:
                return await this._addNodejsSamples();

            case PROJECT_TYPE.unknown:
            default:
            // issue warning?
        }
    }

    async _addJavaSamples() {
        // only execute if not add via cds init --add java, otherwise samples would be added twice
        // do not check in canRun since log output "> adding samples" wouldn't appear
        if (!this.options.add.has(OPTION_JAVA)) {
            // keep sequence since plugin needs samples to generate test classes
            const mvnAddSamplesArgs = mvnArchetypes.getAddSamplesCmdArgs(this.options);
            try {
                await commandUtil.spawnCommand('mvn', mvnAddSamplesArgs, {
                    cwd: this.projectPath
                });

                const mvnAddTestsArgs = mvnArchetypes.getAddTestsCmdArgs(this.options);
                await commandUtil.spawnCommand('mvn', mvnAddTestsArgs, {
                    cwd: this.projectPath
                });
            } catch (err) {
                if (err.code === 'ENOENT' && err.path === 'mvn') {
                    throw new Error(`Maven executable 'mvn' not found, follow ${term.info(URLS.MAVEN_INSTALL_HELP)} and install Maven on your machine.`);
                }
                throw err;
            }
        }
    }

    async _addNodejsSamples() {
        const folders = (await this.getEnv()).folders;
        const dbFolder = join(this.projectPath, folders.db);
        await copyFiles(join(__dirname, 'files', 'nodejs', 'db'), dbFolder, {}, this.options.force);

        const srvFolder = join(this.projectPath, folders.srv);
        await copyFiles(join(__dirname, 'files', 'nodejs', 'srv'), srvFolder, {
            dbFolder: folders.db.replace(/[\\/]+$/, '')
        }, this.options.force);
    }

    async finalize() {
    }
}
