const { join } = require('path')
const ProjectReader = require('../../util/projectReader')
const { mergeJSON } = require('../../util/merge')
const { copyAndTrack, parseMd5File, writeMd5File } = require('../../util/md5Tracking')

module.exports = class ExtensibilityTemplate extends require('../templateBase') {
  constructor(projectPath, generator) {
    super(projectPath, generator, __dirname)
    this.projectReader = new ProjectReader(projectPath)
  }

  static hasFacet(env) {
    return !!env.requires?.extensibility
  }

  async run() {
    const projectDescriptor = await this.projectReader.read(this.options)
    const { for: forProfile, isJava } = projectDescriptor.cap
    const cdsConfigPath = join(this.projectPath, isJava ? '.cdsrc.json' : 'package.json')
    const cdsTemplateFile = forProfile ? (isJava ? 'cdsrc.json.hbs' : 'cds.package.json.hbs') : (isJava ? 'cdsrc.json' : 'cds.package.json')
    await mergeJSON(cdsConfigPath, join(__dirname, 'files', cdsTemplateFile), projectDescriptor)
    await this.runDependentMerging()
  }

  async runDependentMerging(context = {}) {
    const projectDescriptor = await this.projectReader.read()
    const { hasXsuaa, hasHelm, hasApprouter } = projectDescriptor.cap
    if (hasXsuaa) {
      await mergeJSON(
        join(this.projectPath, 'xs-security.json'),
        join(__dirname, 'files', 'xs-security.json.hbs'),
        projectDescriptor,
        {
          additions: [{
            ref: 'scope-extension-developer',
            in: 'scopes',
            where: [{ property: 'name', isEqualTo: '$XSAPPNAME.cds.ExtensionDeveloper' }],
          }, {
            ref: 'scope-uiflex',
            in: 'scopes',
            where: [{ property: 'name', isEqualTo: '$XSAPPNAME.cds.UIFlexDeveloper' }],
          }, {
            ref: 'template-extension-developer',
            in: 'role-templates',
            where: [{ property: 'name', isEqualTo: 'ExtensionDeveloper' }],
          }]
        }
      )
    }
    if (hasApprouter) {
      const ApprouterTemplate = require(`../approuter`)
      const approuterTemplate = new ApprouterTemplate(this.projectPath, this.generator)
      await approuterTemplate.runDependentMerging()
  }
    if (hasXsuaa && hasHelm) {
      //in case facet is being added to the already exisiting charts folder
      let isIndependentCommand = false
      if(Object.keys(context).length == 0){
          isIndependentCommand = true
          context.projectPath = this.projectPath
          context.oldTrackingData = context.newTrackingData = await parseMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'))
      }
      // REVISIT: Shared xs-security.json location for Helm and MTA?
      await copyAndTrack(
        join(this.projectPath, 'xs-security.json'),
        join(this.projectPath, 'chart', 'xs-security.json'),
        context
      )
      if(isIndependentCommand) await writeMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'), context.newTrackingData)
    }
  }
}
