const { join, relative } = require('path');
const { mkdirp } = require('../../../cds').utils
const { COMMAND_ADD, OPTION_JAVA, OPTION_NODEJS, URLS } = require('../../constants')
const { copyFiles } = require('../../util/templateUtil')
const LOG = console

module.exports = class NodeJSTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
    }

    static hasFacet() {
        // TODO: Implement
        //return this.pLanguage === P_LANGUAGE_NODEJS
    }

    async canRun() {
        if (this.options._cmd === COMMAND_ADD) {
            throw new Error(`You can't change the type of an existing project.`);
        }

        if (this.options.add.has(OPTION_JAVA)) {
            throw new Error(`Only one runtime per project is supported. Specify either ${OPTION_JAVA} or ${OPTION_NODEJS}.`);
        }

        return true;
    }

    async run() {
        const env = await this.getEnv();
        const { projectPath, projectName } = this
        await copyFiles(join(__dirname, 'files'), projectPath, { projectName }, this.options.force)

        await mkdirp(projectPath, env.folders.db);
        await mkdirp(projectPath, env.folders.srv);
        await mkdirp(projectPath, env.folders.app);
    }

    async finalize() {
        const relativeProjectPath = relative(this.cwd, this.projectPath);
        if (relativeProjectPath && relativeProjectPath !== '.') {
            LOG.info(`Continue with 'cd ${relativeProjectPath}'`);
        }

        LOG.info(`Find samples on ${URLS.SAMPLES}`);
        LOG.info(`Learn about next steps at ${URLS.CAPIRE}`);
    }
}
