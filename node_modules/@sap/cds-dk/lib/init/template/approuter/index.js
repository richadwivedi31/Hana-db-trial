const { join } = require('path')
const ProjectReader = require('../../util/projectReader')
const { mergeJSON, mergeYAML, sortDependencies } = require('../../util/merge')
const { OPTION_XSUAA, PROJECT_TYPE } = require('../../constants')
const {
    srvNode, srvJava, approuter, // Modules
    xsuaa, // BTP Services
    requiredMtxAPI, requiredJavaApprouterAPI, providedJavaApprouterAPI, // APIs
    requiredAppAPI, providedAppAPI,
    approuterExtensibility, approuterExtensibilityJava // xs-app.json config
} = require('../_merging/registry-mta')
const { copyAndTrack, parseMd5File, writeMd5File } = require('../../util/md5Tracking')

module.exports = class ApprouterTemplate extends require('../templateBase') {

    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(projectPath)
    }

    static hasFacet(env) {
        return !!env.requires?.approuter
    }

    getDependencies() {
        return [OPTION_XSUAA]
    }

    async run() {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { for: forProfile } = projectDescriptor.cap
        const appPath = join(this.projectPath, projectDescriptor.ui.appPath || 'app')
        const appPackageJSONPath = join(appPath, 'package.json')

        await mergeJSON(appPackageJSONPath, join(__dirname, 'files', 'package.json'))
        await sortDependencies(appPackageJSONPath)

        await mergeJSON(join(appPath, 'default-env.json'), join(__dirname, 'files', 'default-env.json'))

        const projectType = await this.getProjectType()
        switch (projectType) {
            case PROJECT_TYPE.java: {
                const cdsrcJSONPath = join(this.projectPath, '.cdsrc.json')
                const cdsTemplateFile = forProfile ? 'cds.cdsrc.json.hbs' : 'cds.cdsrc.json'
                const cdsPackageJSONPath = join(__dirname, 'files', cdsTemplateFile)
                await mergeJSON(cdsrcJSONPath, cdsPackageJSONPath, projectDescriptor)
                break
            }
            case PROJECT_TYPE.nodejs: {
                const packageJSONPath = join(this.projectPath, 'package.json')
                const cdsTemplateFile = forProfile ? 'cds.package.json.hbs' : 'cds.package.json'
                const cdsPackageJSONPath = join(__dirname, 'files', cdsTemplateFile)
                await mergeJSON(packageJSONPath, cdsPackageJSONPath, projectDescriptor)
                break
            }
        }

        await this.runDependentMerging()
    }

    async runDependentMerging(context = {}) {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { isNodejs, isJava, isExtensible, isMultitenant, hasMta, hasHelm } = projectDescriptor.cap

        if (hasMta) {
            const srv = isNodejs ? srvNode : srvJava
            const apis = isJava ? [requiredJavaApprouterAPI, providedJavaApprouterAPI] : []
            if (isNodejs && isMultitenant) apis.push(requiredMtxAPI, requiredAppAPI, providedAppAPI)
            if (isJava && isMultitenant) apis.push(requiredMtxAPI)
            const additions = [srv, approuter, xsuaa, ...apis]
            const mtaYAMLPath = join(this.projectPath, 'mta.yaml')
            await mergeYAML(mtaYAMLPath, join(__dirname, 'files', 'mta.yaml.hbs'), projectDescriptor, {
                additions,
                relationships: [{
                    insert: [xsuaa, 'name'],
                    into: [srv, 'requires', 'name']
                }, {
                    insert: [xsuaa, 'name'],
                    into: [approuter, 'requires', 'name']
                }],
            })
        }

        if (hasHelm) {
            let isIndependentCommand = false;
            if (Object.keys(context).length == 0) {
                isIndependentCommand = true;
                context.projectPath = this.projectPath;
                context.oldTrackingData = context.newTrackingData = await parseMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'));
            }

            await mergeYAML(
                join(this.projectPath, 'chart', 'values.yaml'),
                join(__dirname, 'files', 'values.yaml.hbs'),
                projectDescriptor
            )

            await mergeYAML(
                join(this.projectPath, 'chart', 'Chart.yaml'),
                join(__dirname, 'files', 'chart.yaml'),
                projectDescriptor,
                { additions: [{
                    ref: `web-application-approuter`,
                    in: `dependencies`,
                    where: [{
                        property: 'alias',
                        isEqualTo: 'approuter'
                    }]
                }]}
            )
            await mergeYAML(
                join(this.projectPath, 'chart', 'values.yaml'),
                {
                  approuter: {
                    envFrom: [
                      {
                        configMapRef: {
                          name: "{{ .Release.Name }}-approuter-configmap"
                        }
                      }
                    ]
                  }
                },
                projectDescriptor
            )

            const fileName = isMultitenant ? 'approuter-mtxs-configmap.yaml' : 'approuter-configmap.yaml';

            await copyAndTrack(
                join(__dirname, 'files', fileName),
                join(this.projectPath, 'chart', 'templates', 'approuter-configmap.yaml'),
                context,
                true
            )

            if (isIndependentCommand) await writeMd5File(join(this.projectPath, 'chart', '.cds-add-helm-files.md5'), context.newTrackingData);
        }

        const appPath = join(this.projectPath, projectDescriptor.ui.appPath || 'app')
        const additions = isExtensible && isJava ? [{ ...approuterExtensibilityJava, at: 0 }] :
                          isExtensible && isNodejs ? [{ ...approuterExtensibility, at: 0 }] : []
        await mergeJSON(join(appPath, 'xs-app.json'), join(__dirname, 'files', 'xs-app.json.hbs'), projectDescriptor, { additions })
    }
}
